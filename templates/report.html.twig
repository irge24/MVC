{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<h1>Report - Redovisningstexter</h1>

<ul>
    <li><a href="#kmom01">kmom01</a></li>
    <li><a href="#kmom02">kmom02</a></li>
    <li><a href="#kmom03">kmom03</a></li>
    <li><a href="#kmom04">kmom04</a></li>
    <li><a href="#kmom05">kmom05</a></li>
    <li><a href="#kmom06">kmom06</a></li>
    <li><a href="#kmom10">kmom10</a></li>
</ul>
    
<main class="main">

        <h2 id="kmom01">kmom01</h2>
        <p> Nu är jag färdig med min första uppgift i mvc, objektorienterad programmering 
        i PHP. Jag gick precis kursen, oopython - objektorienterad programmering i python, 
        och har därmed några tidigare erfarenheter av objektorienterad programmering, 
        även om jag ännu inte är färdig med oopython. Jag är iallafall bekant med denna gren av
        olika programmeringsspråk, så jag har en viss grund. Mina reflektioner kring kodbasen, koden och
        strukturen är att jag har en väldigt positiv inställning och var speciellt förtjust i strukturen. 
        Alla olika mappar och filer var strukturerade och uppdelade på ett klokt sätt och jag kände
        att jag förstod vad koden i varje fil gjorde och varför filen var just där den var, uppdelad på det sättet. 
        Koden i sig är jag väl också positiv till, det var inte så mycket nytt i just själva koden, så det
        var skönt att få jobba med sådant man är bekant med. Det var relativt lätt detta kmom. Gällande PHPs modell 
        för klasser och objekt skulle jag säga att det inte är så komplicerat, mer än att man behöver förstå 
        och lära sig vad en klass innebär, vad ett objekt innebär, hur man använder sig av metoder, publikt/privat osv. 
        Man behöver självfallet ha en grund i PHP, för det är ju det programmeringsspråk som används. Det hjälper inte
        så mycket att skapa en klass, om du inte förstår koden inom klassen. Man behöver alltså ha grunderna inom PHP, 
        och därefter lära sig strukturen av klasser och objekt, hur de fungerar och alla begrepp därtill.</p>

        <p>Jag skumläste endast några delar av artikeln "PHP The Right Way", men kollade igenom innehållsföreteckningen lite mer noggrant.
        De delar jag kan tycka är extra viktiga i artiklen är såklart "The Basics", det är ju så man lär sig ett programmeringsspråk;
        att man börjar med grunderna. Därefter tycker jag delen om databaser också är en viktig del att ta med sig,
        eftersom de utgör en stor del av programmering, därmed är det sunt att lära sig om det och iallafall ha viss förståelse
        om hur det fungerar, för att själv kunna använda sig av databaser. Jag tyckte också om att de länkade 
        till fler källor i artikeln. På så sätt får läsaren fler resurser och material för att lära sig mer.</p>

        <p>Min TIL för detta kmom är ganska mycket. Bland det jag lärt mig är såklart
        hur man använder sig av Symfony och bygger upp en webbplats med den. Jag har
        förstått och lärt mig mer om hur jag delar upp koden i olika funktioner och twig filer
        så att man sedan får en bra HTML sida i sin helhet, där varje fil spelar roll, vare 
        sig det är PHP, twig, vanlig html eller annat. Jag har stärkt mina grunder.
        </p>

        <h2 id="kmom02">kmom02</h2>

        <p>Arv är när en klass får attribut och metoder från en annan klass, som den sedan kan 
        använda, alltså ärver från den; det blir att barnklassen ärver från
        föräldraklassen. Komposition är liknande; det är när en klass innehåller en instans av en annan klass inom 
        sig och kan därmed använda den andra klassens metoder. Interface beskrivs som ett kontrakt,
        som har ett villkor på en metod eller flera metoder som alla klasser ska använda sig av. Varje enskild
        klass kan sedan implementera och definiera metod såsom det passar.
        Trait är en, eller flera, metoder som kan användas inom flera olika klasser, utan att de behöver ärva varandra.</p>

        <p>Min implementation av uppgiften var att jag började med att steg 
        för steg göra övningarna parallellt med genomgångarna. På så sätt fick
        jag en grundstruktur som jag sedan kunde använda i uppgiften. Dessutom, med 
        hjälp av genomgången förstod jag koden bättre, då jag fick en djupare
        förklaring därifrån; därmed blev det enklare att sedan modifiera koden
        så att den skulle passa uppgiften. När jag var färdig med övningarna började 
        jag med uppgiften och hade övningens kod som start, sedan gjorde jag ändringar därifrån.
        Jag hade mina klasser, men lade till eller tog bort metoder beroende på vilka som behövdes 
        just i uppgiften. Sedan gjorde jag en route i taget genom att välja routen från övningen
        som var mest lik, och därifrån ändrade jag den och implementerade olika metoder från klasserna där.
        Med tanke på att jag gått oopython gick det väldigt bra, för jag kände igen en del strukturer.
        Jag är ganska nöjd med min kod; jag är mest nöjd över att jag lade ner ordentligt med tid för 
        att förstå koden och på slutet kändes det som att jag verkligen behärska den. Det känns lättare
        att använda manualen och att söka på rätt sätt genom internet. Jag tänker att det alltid finns
        förbättringspotential, kanske att jag kunde lagt till fler metoder för att göra koden i kontrollern 
        ännu mer koncis, men annars är jag nöjd med backenden.</p>

        <p>Såhär långt känns det väldigt bra att jobba i Symfony med applikationskod enligt MVC. Det 
        känns väldigt familjärt, då vi använder oss av liknande kod från tidigare kurser, bl.a. oopython
        och javascript. Det är alltså enklare än vad jag trodde, hittills, och det känns bra 
        att se hur man jobbar effektivare och förstår mer ju mer man studerar programmering.</p>

        <p>Min TIL för detta kmom är främst hur klasser byggs upp och implementeras i detta
        programmeringsspråk, PHP. Även om det är likt det jag har gjort innan så var det vissa 
        nya saker i kodstrukturen, så det var nytt och någonting jag fick lära mig denna gång.
        Jag fick också en djupare förståelse för hur UML diagram byggs upp.</p>

        <h2 id="kmom03">kmom03</h2>

        <p>Det kändes bättre än vad jag trodde att modellera mitt kortspel
        med flödesdiagram och pseudokod. Det var självfallet det första jag började
        med att göra när jag skulle sätta igång med uppgiften, men jag trodde sedan att jag 
        bara skulle låta det vara och gå vidare. Jag gick dock tillbaka till dokumentationssidan
        flera gånger och använde den parallellt med själva kodningen, för att steg för steg
        kunna bygga upp spelet på det sätt jag hade tänkt mig. Diagrammen och pseudokoden var alltså 
        väldigt hjälpsamma och jag använde mig av dem under uppgiftens gång, istället för att bara 
        göra färdig den delen av uppgiften och gå vidare till koden, så det var positivt!</p>

        <p>Jag började min implementation av uppgiften genom att, med hjälp av min dokumentationssida,
        kolla vilken kod jag redan hade som jag kunde återanvända. Det var ganska mycket av tidigare klasser
        och kod som jag kunde fortsätta använda i detta kursmoment, och endast lite som jag behövde justera eller lägga
        till. Det var mest flödet i själva uppgiften som tog tid att bygga upp, inte templatesen eller klasserna, 
        för de återanvände jag mestadels från kursmoment två. Jag är relativt nöjd med uppgiften; kunde såklart
        gjort spelet mer anancerat och gjort mer med själva designen/css, men det hade jag tyvärr inte möjlighet och tid till. 
        Det är ganska ofta som jag har tidspress med skoluppgifterna, så jag försöker mestadels fokusera på att förstå koden och faktiskt
        lära mig, än att lägga ner tid på sådant som kan ses som "extra", eller "roligt", såsom css som jag nämnde ovan. 
        Jag ville främst skapa en bra grundstruktur till spelet och försöka göra koden så simpel som möjligt, samtidigt
        som jag försökte göra kontrollern så "kod-fri" som möjligt, och istället koda i klasserna, såsom vi fick beskrivet
        i uppgiftens instruktioner.</p>

        <p>Så här långt i kursen känns det bra att koda i ramverket Symfony, inga större konstigheter.
        Jag känner igen i stort sett allt vi har gjort sedan tidigare kurser, även om det finns små skillnader. Det känns
        tryggt och familjärt; inte alltför svårt på så sätt att man kör fast helt, men inte alltför enkelt heller,
        en bra balans mellan enkelhet och utmaning, känner jag.  Min TIL för detta kmom är att jag känner mig säkrare
        i att konstruera klasser och parallellt jobba med en kontroller med alla mina routes. Förut kunde det kännas förvirrande
        att behöva orientera sig mellan många olika filer; kontroller, json, templates, klasser osv, men det 
        känns säkrare nu och som att det fallit på plats.</p>

        <h2 id="kmom04">kmom04</h2>

        <h2 id="kmom05">kmom05</h2>

        <h2 id="kmom06">kmom06</h2>

        <h2 id="kmom10">kmom10</h2>
    
</main>

{% endblock %}